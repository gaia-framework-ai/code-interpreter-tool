/**
 * Represents a Jupyter notebook.
 */
export interface JupyterNotebook {
  cells: Cell[];
  metadata: Metadata;
  nbformat: number;
  nbformat_minor: number;
}

/**
 * Represents a cell in a notebook.
 */
export interface Cell {
  /**
   * The type of the cell.
   */
  cell_type: string;
  /**
   * The execution count of the cell, representing how many times the cell has been executed.
   */
  execution_count: number;
  /**
   * The metadata associated with the cell, detailing execution statuses and other settings.
   */
  metadata: CellMetadata;
  /**
   * The outputs generated by the cell, including text, images, and other media.
   */
  outputs: Output[];
  /**
   * The source code of the cell as an array of strings, each representing a line of code.
   */
  source: string[];
}

/**
 * Metadata for a cell, containing execution details.
 */
export interface CellMetadata {
  execution: Execution;
}

/**
 * Execution details for a cell, including various states and responses during the execution process.
 */
export interface Execution {
  'iopub.execute_input': string;
  'iopub.status.busy': string;
  'iopub.status.idle': string;
  'shell.execute_reply': string;
}

/**
 * Output of a cell, can be one of several types including stream output or rich media like images.
 */
export interface Output {
  output_type: string;
  name?: string;
  text?: string[];
  data?: DisplayData;
}

/**
 * Data associated with the output, potentially including images and plain text.
 */
export interface DisplayData {
  'image/png'?: string;
  'text/plain'?: string | string[];
}

/**
 * Represents the output stream from a cell, typically standard output or error streams.
 */
export interface StreamOutput {
  name: string;
  text: string[];
}

/**
 * Metadata for the Jupyter notebook, containing language and format information.
 */
export interface Metadata {
  language_info: LanguageInfo;
}

/**
 * Information about the programming language used in the notebook, including metadata for syntax highlighting and file extensions.
 */
export interface LanguageInfo {
  codemirror_mode: CodeMirrorMode;
  file_extension: string;
  mimetype: string;
  name: string;
  nbconvert_exporter: string;
  pygments_lexer: string;
  version: string;
}

/**
 * Codemirror mode settings, specifying syntax rules and configurations for code editing and display.
 */
export interface CodeMirrorMode {
  name: string;
  version: number;
}


/**
 * Represents the type of a blob.
 */
export enum BlobType {
  Image = 'image',
  File = 'file',
  Folder = 'folder',
}